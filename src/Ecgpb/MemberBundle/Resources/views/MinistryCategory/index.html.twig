{% extends '::base.html.twig' %}


{% block body_start %}<body ng-app="app" ng-controller="ListingController">{% endblock %}


{% block body %}
    <div class="btn-group pull-right">
        <button type="button" class="btn btn-default" ng-click="addCategory()" title="{% trans %}Add Ministry Category{% endtrans %}">
            <span class="glyphicon glyphicon-plus"></span>
        </button>
        <button type="button" class="btn btn-default" ng-click="save()" title="{% trans %}Save Changes{% endtrans %}">
            <span class="glyphicon glyphicon-floppy-disk"></span>
        </button>
    </div>

    <h2>{% trans %}Ministries{% endtrans %}</h2>

    <div class="alert alert-danger ng-hide" ng-show="error">
        {{ '{{ error }}' }}
    </div>

    <table class="table table-bordered">
        <thead>
            <tr>
                <th class="col-md-2">{% trans %}Bereich{% endtrans %}</th>
                <th class="col-md-2">{% trans %}Unterbereich{% endtrans %}</th>
                <th class="col-md-2">{% trans %}Tasks{% endtrans %}</th>
                <th>{% trans %}Contact Persons{% endtrans %}</th>
                <th>{% trans %}Responsible Elders / Deacon{% endtrans %}</th>
                <th class="col-md-1 text-center">{% trans %}Actions{% endtrans %}</th>
            </tr>
        </thead>
        <tbody ng-repeat="ministryCategory in ministryCategories">
            <tr ng-repeat="ministry in ministryCategory.ministries">
                <td rowspan="{{ '{{ ministryCategory.ministries.length }}' }}" ng-if="$first">
                    <input type="text" ng-model="ministryCategory.name" class="form-control input-sm" ng-show="isEditable(ministryCategory)" nait-model-update="true" />
                    <span ng-show="!isEditable(ministryCategory)">{{ '{{ ministryCategory.name }}' }}</span>
                </td>
                <td>
                    <input type="text" ng-model="ministry.name" class="form-control input-sm" ng-show="isEditable(ministryCategory)" nait-model-update="true" />
                    <span ng-show="!isEditable(ministryCategory)">{{ '{{ ministry.name }}' }}</span>
                    <button type="button" class="btn btn-default btn-sm pull-right" ng-click="ministryCategory.newMinistry()" ng-show="isEditable(ministryCategory) && $last">
                        <span class="glyphicon glyphicon-plus"></span>
                    </button>
                </td>
                <td>
                    <textarea ng-model="ministry.description" class="form-control input-sm" ng-show="isEditable(ministryCategory)" nait-model-update="true"></textarea>
                    <span ng-show="!isEditable(ministryCategory)">{{ '{{ ministry.description }}' }}</span>
                </td>
                <td>
                    <div ng-repeat="assignment in ministry.contactAssignments" class="row">
                        <div class="col-md-5" ng-show="isEditable(ministryCategory)">
                            <select class="form-control input-sm"
                             ng-model="assignment.group"
                             ng-options="group as group.name for group in groups track by group.id">
                                <option value="">- {% trans %}Group{% endtrans %} -</option>
                            </select>
                        </div>
                        <div class="col-md-5" ng-show="isEditable(ministryCategory)">
                            <select class="form-control input-sm"
                             ng-model="assignment.person"
                             ng-options="person as getPersonsLabel(person) for person in persons track by person.id">
                                <option value="">- {% trans %}Person{% endtrans %} -</option>
                            </select>
                        </div>
                        <div class="col-md-2" ng-show="isEditable(ministryCategory)">
                            <button type="button" class="btn btn-default btn-sm pull-right" ng-click="ministry.removeContact(assignment)" ng-show="isEditable(ministryCategory)">
                                <span class="glyphicon glyphicon-minus"></span>
                            </button>
                        </div>
                        <div class="col-md-12" ng-show="!isEditable(ministryCategory)">
                            <strong>
                                {{ '{{ assignment.group ? assignment.group.name : getPersonsLabel(assignment.person) }}' }}
                            </strong>
                        </div>
                    </div>
                    <button type="button" class="btn btn-default btn-sm pull-right" ng-click="ministry.newContact()" ng-show="isEditable(ministryCategory)">
                        <span class="glyphicon glyphicon-plus"></span>
                    </button>
                </td>
                <td>
                    <div ng-repeat="assignment in ministry.responsibleAssignments" class="row">
                        <div class="col-md-5" ng-show="isEditable(ministryCategory)">
                            <select class="form-control input-sm"
                             ng-model="assignment.group"
                             ng-options="group as group.name for group in groups track by group.id">
                                <option value="">- {% trans %}Group{% endtrans %} -</option>
                            </select>
                        </div>
                        <div class="col-md-5" ng-show="isEditable(ministryCategory)">
                            <select class="form-control input-sm"
                             ng-model="assignment.person"
                             ng-options="person as getPersonsLabel(person) for person in persons track by person.id">
                                <option value="">- {% trans %}Person{% endtrans %} -</option>
                            </select>
                        </div>
                        <div class="col-md-2" ng-show="isEditable(ministryCategory)">
                            <button type="button" class="btn btn-default btn-sm pull-right" ng-click="ministry.removeResponsible(assignment)" ng-show="isEditable(ministryCategory)">
                                <span class="glyphicon glyphicon-minus"></span>
                            </button>
                        </div>
                        <div class="col-md-12" ng-show="!isEditable(ministryCategory)">
                            <strong>
                                {{ '{{ assignment.group ? assignment.group.name : getPersonsLabel(assignment.person) }}' }}
                            </strong>
                        </div>
                    </div>
                    <button type="button" class="btn btn-default btn-sm pull-right" ng-click="ministry.newResponsible()" ng-show="isEditable(ministryCategory)">
                        <span class="glyphicon glyphicon-plus"></span>
                    </button>
                </td>
                <td class="text-center" rowspan="{{ '{{ ministryCategory.ministries.length }}' }}" ng-if="$first">
                    <button type="button" class="btn btn-default btn-sm" title="{% trans %}Edit Ministry Category{% endtrans %}"
                     ng-click="setEditable(ministryCategory)"
                     ng-show="!isEditable(ministryCategory)">
                        <span class="glyphicon glyphicon-pencil"></span>
                    </button>
                    <button type="button" class="btn btn-default btn-sm" title="{% trans %}Undo Changes{% endtrans %}"
                     ng-click="cancelEditing()"
                     ng-show="isEditable(ministryCategory)">
                        <span class="glyphicon glyphicon-ban-circle"></span>
                    </button>
                    <button type="button" class="btn btn-default btn-sm"
                     nait-confirm-click
                     confirm="{% trans %}Do you really want to remove this record?{% endtrans %}"
                     confirm-if=""
                     confirm-button-text="{% trans %}Yes{% endtrans %}"
                     cancel-button-text="{% trans %}No{% endtrans %}"
                     do="removeCategory(ministryCategory)">
                        <span class="glyphicon glyphicon-remove"></span>
                    </button>
                </td>
            </tr>
        </tbody>
        <tfoot>
            <tr ng-show="ministryCategories.length == 0">
                <td colspan="7">
                    {% trans %}There are no entries existing, yet.{% endtrans %}
                </td>
            </tr>
        </tfoot>
    </table>
{% endblock %}


{% block javascripts %}
    {{ parent() }}

    <script type="text/javascript">
        // <![CDATA[
        angular.module('app', ['ui.bootstrap', 'naitsirch.helpers'])
            .constant('ministryCategories', {{ categories_json | raw }})
            .constant('persons', {{ persons_json | raw }})
            .constant('groups', {{ groups_json | raw }})
            .constant('updateUrl', '{{ path('ecgpb.member.ministry_category.update') }}')
            .controller('ListingController', function(
                $scope, $http, $modal,
                MinistryCategory, Ministry, ministryCategories, persons, groups,
                updateUrl
            ) {
                $scope.ministryCategories = ministryCategories.map(function(value) { return new MinistryCategory(value); });
                $scope.persons = persons;
                $scope.groups = groups;
                $scope.error = null;
                $scope.editableCategory = null;
                $scope.backupCategory = null;

                $scope.addCategory = function() {
                    var category = new MinistryCategory();
                    $scope.ministryCategories.push(category);
                    $scope.setEditable(category);
                };

                $scope.removeCategory = function (ministryCategory) {
                    var index = $scope.ministryCategories.indexOf(ministryCategory);
                    $scope.ministryCategories.splice(index, 1);
                };

                $scope.setEditable = function(ministryCategory) {
                    $scope.editableCategory = ministryCategory;
                    $scope.backupCategory = angular.copy(ministryCategory);
                };

                $scope.isEditable = function(ministryCategory) {
                    return $scope.editableCategory === ministryCategory;
                };

                $scope.cancelEditing = function() {
                    var index = $scope.ministryCategories.indexOf($scope.editableCategory);
                    $scope.editableCategory = null;
                    $scope.ministryCategories[index] = $scope.backupCategory;
                };

                $scope.getPersonsLabel = function(person) {
                    if (!person || !person.address) {
                        return '';
                    }
                    return person.address.familyName + ', ' + person.firstname + ' (' + new Date(person.dob).getFullYear() + ')';
                };

                $scope.save = function() {
                    $scope.editableCategory = null;
                    var savingModal = $modal.open({templateUrl: 'saving-modal.html'});

                    $http.post(updateUrl, $scope.ministryCategories)
                        .success(function(data, status, headers, config) {
                            $scope.error = null;
                            savingModal.close('success');
                        })
                        .error(function(data, status, headers, config) {
                            $scope.error = data;
                            savingModal.close('error');
                        })
                    ;
                };
            })
            .factory('MinistryCategory', function(Ministry) {
                var MinistryCategory = function(properties) {
                    this.id = properties ? properties.id : null;
                    this.name = properties ? properties.name : '';
                    this.ministries = properties
                        ? properties.ministries.map(function(value) { return new Ministry(value); })
                        : [new Ministry()]
                    ;
                    this.newMinistry = function() {
                        this.ministries.push(new Ministry());
                    };
                };
                return MinistryCategory;
            })
            .factory('Ministry', function(Assignment) {
                var Ministry = function(properties) {
                    this.name = properties ? properties.name : '';
                    this.description = properties ? properties.description : '';
                    this.contactAssignments = properties
                        ? properties.contactAssignments.map(function(value) { return new Assignment(value); })
                        : [new Assignment()]
                    ;
                    this.responsibleAssignments = properties
                        ? properties.responsibleAssignments.map(function(value) { return new Assignment(value); })
                        : [new Assignment()]
                    ;
                    this.newContact = function() {
                        var last = this.contactAssignments.length === 0 ? null : this.contactAssignments[this.contactAssignments.length - 1];
                        if (!last || last.person || last.group) {
                            this.contactAssignments.push(new Assignment());
                        }
                    };
                    this.removeContact = function(assignment) {
                        var index = this.contactAssignments.indexOf(assignment);
                        this.contactAssignments.splice(index, 1);
                    };
                    this.newResponsible = function() {
                        var last = this.responsibleAssignments.length === 0 ? null : this.responsibleAssignments[this.responsibleAssignments.length - 1];
                        if (!last || last.person || last.group) {
                            this.responsibleAssignments.push(new Assignment());
                        }
                    };
                    this.removeResponsible = function(assignment) {
                        var index = this.responsibleAssignments.indexOf(assignment);
                        this.responsibleAssignments.splice(index, 1);
                    };
                };
                return Ministry;
            })
            .factory('Assignment', function() {
                var Assignment = function(properties) {
                    this.id = properties ? properties.id : null;
                    this.group = properties ? properties.group : null;
                    this.person = properties ? properties.person : null;
                };
                return Assignment;
            })
        ;
        // ]]>
    </script>

    <script type="text/ng-template" id="saving-modal.html">
        <div class="modal-body">
            <p>{% trans %}Saving{% endtrans %}...</p>
        </div>
    </script>
{% endblock %}